<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inst = instance_nearest(x, y, Par_Enemy);

player_dir = point_direction(inst.x,inst.y,Player.x,Player.y);
vspBullet = 0;
if(player_dir&lt;270&amp;&amp;player_dir&gt;90)
{
    hspBullet = -BulletSpeed + inst.hsp;
}
else
{
    hspBullet = +BulletSpeed + inst.hsp;
}

/*if(inst.facing_Down){
    hspBullet = inst.hsp;
    vspBullet = inst.vsp + BulletSpeed;
}else if(inst.facing_Up){
    hspBullet = inst.hsp;
    vspBullet = inst.vsp - BulletSpeed;
}else if(inst.facing_Right){
    hspBullet = inst.hsp + BulletSpeed;
    vspBullet = inst.vsp;
}else if(inst.facing_Left){
    hspBullet = inst.hsp - BulletSpeed;
    vspBullet = inst.vsp;    
}
// minimuze speed to 10% of base
if (inst.facing_Right &amp;&amp; inst.facing_Down = 0 &amp;&amp; inst.facing_Up = 0){
    if (hspBullet &lt; BulletSpeed / 10){
        hspBullet = BulletSpeed / 10;
    }
}
if (inst.facing_Left &amp;&amp; inst.facing_Down = 0 &amp;&amp; inst.facing_Up = 0){
    if (abs(hspBullet) &lt; BulletSpeed / 10){
        hspBullet = -BulletSpeed / 10;
    }
}

if (inst.facing_Down){
    if (vspBullet &lt; BulletSpeed / 10){
        vspBullet = BulletSpeed / 10;
    }
}

if (inst.facing_Up){
    if (abs(vspBullet) &lt; BulletSpeed / 10){
        vspBullet = -BulletSpeed / 10;
    }
}

if ((inst.facing_Up || inst.facing_Down) &amp;&amp; inst.vsp = 0){
    firedV = 1;
    firedH = 0;
    firedD = 0;
}else if((!inst.facing_Up || !inst.facing_Down) &amp;&amp; inst.vsp = 0){
    firedV = 0;
    firedH = 1;
    firedD = 0;
}else{
    firedV = 0;
    firedH = 0;
    firedD = 1;
}*/
BulletDamage = BulletDmgX * (inst.attack)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//hitting an enemy
if (place_meeting(x,y,Player)){
    if(!Player.blocking)
    {
        inst = instance_nearest(x,y,Player)
        inst.lostHP += BulletDamage;
        inst.timeOffCombat = 0;
        inst.timeOffCombatHealth = 0;
    }
    instance_destroy()
}

// collision and movement
    if (instance_place(x,y+vspBullet,Par_Jumpthrough) &amp;&amp; sign(vspBullet) == 1)
    {
        if (!place_meeting(x,y,Par_Jumpthrough))
        {
            while (!place_meeting(x,y+sign(vspBullet),Par_Jumpthrough)) y+=1;
            vspBullet = 0;
            onGround = 1;
            doublejump = 1;
        }    
    } 

repeat(round(abs(hspBullet))) {
    var blk, mov;
    mov = 0;
    blk = place_meeting(x+lengthdir_x(1,grv_dir+(sign(hspBullet)*90)),y+lengthdir_y(1,grv_dir+(sign(hspBullet)*90)),Par_Walls);
if(blk==1) {
        for(a=1;a&lt;=max_slp;a+=1) {
            if(place_meeting(x+lengthdir_x(1,grv_dir+(sign(hspBullet)*90))-lengthdir_x(a,grv_dir),y+lengthdir_y(1,grv_dir+(sign(hspBullet)*90))-lengthdir_y(a,grv_dir),Par_Walls)==0) {
                x  += lengthdir_x(1,grv_dir+(sign(hspBullet)*90))-lengthdir_x(a,grv_dir);
                y  += lengthdir_y(1,grv_dir+(sign(hspBullet)*90))-lengthdir_y(a,grv_dir);
                mov = 1;
                break;
            }
        }
        if(mov==0) {
            hspBullet = 0;
            break;
        }
    } else {
        if(mov==0) {
            for(a=max_slp;a&gt;=1;a-=1) {
                if(place_meeting(x+lengthdir_x(1,grv_dir+(sign(hspBullet)*90))+lengthdir_x(a,grv_dir),y+lengthdir_y(1,grv_dir+(sign(hspBullet)*90))+lengthdir_y(a,grv_dir),Par_Walls)==0 &amp;&amp; (place_meeting(x+lengthdir_x(1,grv_dir+(sign(hspBullet)*90))+lengthdir_x(a,grv_dir),y+lengthdir_y(1,grv_dir+(sign(hspBullet)*90))+lengthdir_y(a,grv_dir),Par_Jumpthrough)==0 &amp;&amp; sign(vspBullet)&gt;-1)) {
                    if(place_meeting(x+lengthdir_x(1,grv_dir+(sign(hspBullet)*90))+lengthdir_x(a+1,grv_dir),y+lengthdir_y(1,grv_dir+(sign(hspBullet)*90))+lengthdir_y(a+1,grv_dir),Par_Walls)==1 || place_meeting(x+lengthdir_x(1,grv_dir+(sign(hspBullet)*90))+lengthdir_x(a+1,grv_dir),y+lengthdir_y(1,grv_dir+(sign(hspBullet)*90))+lengthdir_y(a+1,grv_dir),Par_Jumpthrough)==1) {
                        x  += lengthdir_x(1,grv_dir+(sign(hspBullet)*90))+lengthdir_x(a,grv_dir);
                        y  += lengthdir_y(1,grv_dir+(sign(hspBullet)*90))+lengthdir_y(a,grv_dir);
                        mov = 1;
                        break;
                    }
                }
            }
        }
        if(mov==0) {
            x+= lengthdir_x(1,grv_dir+(sign(hspBullet)*90));
            y+= lengthdir_y(1,grv_dir+(sign(hspBullet)*90));
        }
    }
}
var stop;
stop = 0;
repeat(round(abs(vspBullet))) {
    if(place_meeting(x+lengthdir_x(1,grv_dir-90+(sign(vspBullet)*90)),y+lengthdir_y(1,grv_dir-90+(sign(vspBullet)*90)),Par_Walls)==1) {
        vspBullet    = 0;
        onGround = 1;
        doublejump = 1;
        break;
    }else{
    onGround = 0;
    }
    if(vspBullet==0)break;
    x+= lengthdir_x(1,grv_dir-90+(sign(vspBullet)*90));
    y+= lengthdir_y(1,grv_dir-90+(sign(vspBullet)*90));
}

free = 1;
if(place_meeting(x+lengthdir_x(1,grv_dir),y+lengthdir_y(1,grv_dir),Par_Walls)==1) {
    free = 0;
}


//destroy bullet if fired and hspBullet/vspBullet = 0
if(place_meeting(x+1,y,Par_Walls)||place_meeting(x-1,y,Par_Walls)||place_meeting(x,y+1,Par_Walls)||place_meeting(x,y-1,Par_Walls)){
    instance_destroy();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>4,4</point>
  </PhysicsShapePoints>
</object>
