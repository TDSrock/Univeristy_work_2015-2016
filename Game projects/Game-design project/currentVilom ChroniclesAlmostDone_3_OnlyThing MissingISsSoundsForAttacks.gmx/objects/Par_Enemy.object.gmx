<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dropsKey = -1;
CurAttack = baseAttack;
CurDefense = baseDefense;
CurMagic = baseMagic;
CurMR = baseMR;
CurSpeed = baseSpeed;
MaxHP = baseHP;
CurHP = MaxHP - lostHP;
DispHP = CurHP / MaxHP * 100;
facing = 0;
FOV = 60;
SIGHTMAX = 750;
AI_mode = 0;
origin = 0;
max_walking_distance = 250;
ranged_attacks[0] = true;
ranged_attacks[1] = true;
meelee_attacks[0] = true;
meelee_attacks[1] = true;
attacks = ds_list_create();
pref_min_range = 10000;
max_range = 0;
time_to_check = 0;
idle = false;
walking_speed = 3;
running_speed = 3;
attack_cooldown = 30;//in frames
attack_cooldown_curr = 0;//in frames
idle_animation = spr_ninja_idle;
walking_animation = spr_ninja_walking;
attacked = false;
initialized = false;
corruption = 0;
slide_timer = 0;
boss = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(dropsKey != -1){
    inst = instance_create(x,y,obj_key);
    inst.keyFor = dropsKey;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Stats
CurAttack = baseAttack;
CurDefense = baseDefense;
CurMagic = baseMagic;
CurMR = baseMR;
CurSpeed = baseSpeed;
MaxHP = baseHP;
CurHP = MaxHP - lostHP;
DispHP = CurHP / MaxHP * 100;
randomize();
/*while(place_meeting(x,y,Par_Walls))
{
    y--;
}*/
Ai_script_1();
if(facing&lt;270&amp;&amp;facing&gt;90)
    image_xscale = 1;
else
    image_xscale = -1;
//kill
if (CurHP &lt;= 0){
//Arguments: Range, Corruption at epicenter, Corruption at edge, Corruption max, Location_X , Location_Y.
    scr_corruption(300,30,0,60,x,y,2);
    instance_destroy();
   
}
//reset hit to 0
hit = 0;

//gravity
if(place_meeting(x,y,Par_Water)){
    swimming = 1;
    vsp += grav/3;
    doublejump = 1;
}else{
    vsp   += grav;
    swimming = 0;
}

// HORIZONTAL MOVEMENT
    if (instance_place(x,y+vsp,Par_Jumpthrough) &amp;&amp; sign(vsp) == 1)
    {
        if (!place_meeting(x,y,Par_Jumpthrough))
        {
            while (!place_meeting(x,y+sign(vsp),Par_Jumpthrough)) y+=1;
            vsp=0;
            onGround = 1;
            doublejump = 1;
        }    
    } 

repeat(round(abs(hsp))) {
    var blk, mov;
    mov = 0;
    blk = place_meeting(x+lengthdir_x(1,grv_dir+(sign(hsp)*90)),y+lengthdir_y(1,grv_dir+(sign(hsp)*90)),Par_Walls);
if(blk==1) {
        for(a=1;a&lt;=max_slp;a+=1) {
            if(place_meeting(x+lengthdir_x(1,grv_dir+(sign(hsp)*90))-lengthdir_x(a,grv_dir),y+lengthdir_y(1,grv_dir+(sign(hsp)*90))-lengthdir_y(a,grv_dir),Par_Walls)==0) {
                x  += lengthdir_x(1,grv_dir+(sign(hsp)*90))-lengthdir_x(a,grv_dir);
                y  += lengthdir_y(1,grv_dir+(sign(hsp)*90))-lengthdir_y(a,grv_dir);
                mov = 1;
                break;
            }
        }
        if(mov==0) {
            hsp = 0;
            break;
        }
    } else {
        if(mov==0) {
            for(a=max_slp;a&gt;=1;a-=1) {
                if(place_meeting(x+lengthdir_x(1,grv_dir+(sign(hsp)*90))+lengthdir_x(a,grv_dir),y+lengthdir_y(1,grv_dir+(sign(hsp)*90))+lengthdir_y(a,grv_dir),Par_Walls)==0 &amp;&amp; (place_meeting(x+lengthdir_x(1,grv_dir+(sign(hsp)*90))+lengthdir_x(a,grv_dir),y+lengthdir_y(1,grv_dir+(sign(hsp)*90))+lengthdir_y(a,grv_dir),Par_Jumpthrough)==0 &amp;&amp; sign(vsp)&gt;-1)) {
                    if(place_meeting(x+lengthdir_x(1,grv_dir+(sign(hsp)*90))+lengthdir_x(a+1,grv_dir),y+lengthdir_y(1,grv_dir+(sign(hsp)*90))+lengthdir_y(a+1,grv_dir),Par_Walls)==1 || place_meeting(x+lengthdir_x(1,grv_dir+(sign(hsp)*90))+lengthdir_x(a+1,grv_dir),y+lengthdir_y(1,grv_dir+(sign(hsp)*90))+lengthdir_y(a+1,grv_dir),Par_Jumpthrough)==1) {
                        x  += lengthdir_x(1,grv_dir+(sign(hsp)*90))+lengthdir_x(a,grv_dir);
                        y  += lengthdir_y(1,grv_dir+(sign(hsp)*90))+lengthdir_y(a,grv_dir);
                        mov = 1;
                        break;
                    }
                }
            }
        }
        if(mov==0) {
            x+= lengthdir_x(1,grv_dir+(sign(hsp)*90));
            y+= lengthdir_y(1,grv_dir+(sign(hsp)*90));
        }
    }
}
var stop;
stop = 0;
repeat(round(abs(vsp))) {
    if(place_meeting(x+lengthdir_x(1,grv_dir-90+(sign(vsp)*90)),y+lengthdir_y(1,grv_dir-90+(sign(vsp)*90)),Par_Walls)==1) {
        vsp    = 0;
        onGround = 1;
        doublejump = 1;
        break;
    }else{
    onGround = 0;
    }
    if(vsp==0)break;
    x+= lengthdir_x(1,grv_dir-90+(sign(vsp)*90));
    y+= lengthdir_y(1,grv_dir-90+(sign(vsp)*90));
}

free = 1;
if(place_meeting(x+lengthdir_x(1,grv_dir),y+lengthdir_y(1,grv_dir),Par_Walls)==1) {
    free = 0;
}
if(hit = 1){
    instance_destroy();
}
hit = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(boss){
    if(x &gt;= Player.x - 1240 and x &lt;= Player.x + 1240 and
       y &gt;= Player.y - 720 and y &lt;= Player.y + 720)
    {
        show_debug_message("drawing boss hp bar " + string(bossName));
        draw_text(30,660, bossName);
        draw_healthbar(20, 680, 1220, 700, DispHP,c_black, c_red, c_lime, 0,true,true);
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///show hp bar
draw_self();
if (CurHP !=MaxHP){
    if(!boss){
        draw_healthbar(self.x - 18,self.y -40,self.x + 18,self.y - 30, DispHP,c_black, c_red, c_lime, 0,true,true);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
